<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>TRAVEL AND TRANSPORTATION</title>
<style>
    .card {
        border: 1px solid #e0e0e0;
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
        color: white;
    }
    .card h3 {
        margin-top: 0;  // Reduce space at the top
    }

    .time {
        font-size: 1.5em;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .event-name,
    .details {
        color: white;
        font-size: larger;
    }

    .event-day h2:before {
        content: '';
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 0;
        height: 0;
        border-left: 10px solid white;
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        margin-right: 10px;
    }

    .event-day.expanded h2:before {
        transform: translateY(-50%) rotate(90deg);
    }

    .event-day:last-of-type {
        margin-bottom: 20px;
        /* Adjust this value as needed */
    }

    .event-day h2 {
        color: white;
        font-size: larger;
        padding: 10px 0;
        padding-left: 20px;
        position: relative;
        cursor: pointer;
    }

    .event-day:last-of-type .card:last-of-type {
        margin-bottom: 50px;
        /* Adjust this value as needed */
    }

    body {
        margin-left: 15px;
        /* This applies a left margin to everything within the body */
    }

    a {
        color: #80ecff;
    }

    /* For non-collapsible text */
    #nonCollapsible,
    #nonCollapsible h3 {
        margin-top: 20px;
        color: white;
    }

    #nonCollapsible p {
        color: white;
        margin-bottom: 50px;
    }
</style>

<script defer>
    var boatSchedule = [
        {
            "day": "Monday, 30th Oct.",
            "toSolana": [
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 15:00, arrive 15:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 16:00, arrive 16:50"
            ],
            "fromSolana": [
                "Depart Solana Campus at 18:30, arrive 19:20",
                "Depart Solana Campus at 19:00, arrive 19:45"
            ]
        },
        {
            "day": "Tuesday, 31st Oct.",
            "toSolana": [
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 9:00, arrive 9:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 10:00, arrive 10:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 11:30, arrive 12:20",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 12:30, arrive 13:20"
            ],
            "fromSolana": [
                "Depart Solana Campus at 18:30, arrive 19:20"
            ]
        },
        // Wednesday to Friday for boat
        {
            "day": "Wednesday, 1st Nov.",
            "toSolana": [
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 9:00, arrive 9:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 10:00, arrive 10:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 11:30, arrive 12:20",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 12:30, arrive 13:20"
            ],
            "fromSolana": [
                "Depart Solana Campus at 18:30, arrive 19:20"
            ]
        },
        {
            "day": "Thursday, 2nd Nov.",
            "toSolana": [
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 10:00, arrive 10:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 12:30, arrive 13:20"
            ],
        },
        {
            "day": "Friday, 3rd Nov.",
            "toSolana": [
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 9:00, arrive 9:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 10:00, arrive 10:50",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 11:30, arrive 12:20",
                "Depart <a href='https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9'>IJCatcher</a> at 12:30, arrive 13:20"
            ],
            "fromSolana": [
                "Depart Solana Campus at 16:00, arrive 16:50"
            ]
        }
    ];

    var shuttleSchedule = [
        {
            "day": "Monday, 30th Oct.",
            "toSolana": ["15:30-17:00"],
            "fromSolana": ["17:00-20:15"]
        },
        {
            "day": "Tuesday, 31st Oct.",
            "toSolana": ["8:30-13:00"],
            "fromSolana": ["17:00-20:15"]
        },
        // Wednesday to Friday for shuttle
        {
            "day": "Wednesday, 1st Nov.",
            "toSolana": ["8:30-13:00"],
            "fromSolana": ["17:00-20:15"]
        },
        {
            "day": "Thursday, 2nd Nov.",
            "toSolana": ["8:30-13:00"],
            "fromSolana": ["17:00-20:15"]
        },
        {
            "day": "Friday, 3rd Nov.",
            "toSolana": ["8:30-13:00"],
            "fromSolana": ["17:00-20:15"]
        }
    ];

function generateCombinedSchedule(boatSchedule, shuttleSchedule) {
    let container = document.createElement('div');
    container.setAttribute('id', 'scheduleContainer');

    for (let i = 0; i < boatSchedule.length; i++) {
        let dayContainer = document.createElement('div');
        dayContainer.className = "event-day";

        // Day Header
        let dayHeader = document.createElement('h2');
        dayHeader.innerText = boatSchedule[i].day;
        dayHeader.className = 'bp-title';
        dayHeader.style.color = 'white';
        dayContainer.appendChild(dayHeader);

        // Collapse/Expand Logic
        dayHeader.addEventListener('click', function() {
            // Toggle between expanded and collapsed states
            if(dayContainer.classList.contains('expanded')) {
                dayContainer.classList.remove('expanded');
                Array.from(dayContainer.children).forEach(child => {
                    if(child !== dayHeader) {
                        child.style.display = 'none';
                    }
                });
            } else {
                dayContainer.classList.add('expanded');
                Array.from(dayContainer.children).forEach(child => {
                    if(child !== dayHeader) {
                        child.style.display = 'block';
                    }
                });
            }
        });

        // Start in a collapsed state
        Array.from(dayContainer.children).forEach(child => {
            if(child !== dayHeader) {
                child.style.display = 'none';
            }
        });

        // Generate Boat and Shuttle Cards
        [boatSchedule[i], shuttleSchedule[i]].forEach((data, idx) => {
            let card = document.createElement('div');
            card.className = 'card';

            let transportTitle = document.createElement('h3');
            transportTitle.innerText = idx === 0 ? 'Boat' : 'Shuttle';
            transportTitle.style.color = 'white';
            card.appendChild(transportTitle);

            let infoText = idx === 0 ? 'Cruise to campus in style! Take a boat with your fellow Breakpoint attendees. </p><p>(Beverages and pastries available for purchase at IJCatcher before you leave!)</p><p>Each one-way trip takes approximately 50 minutes.</p><p class="bp-text-green">Boarding begins 30 minutes prior to departure.</p>' : 'Get to campus as quickly as possible! Shuttle buses will be running every 15 minutes between Campus and central Amsterdam during operating hours indicated below. Each trip takes approximately 30 minutes.';
            if (idx === 0 && data.day === 'Thursday, 2nd Nov.') {
                infoText = 'Due to the windy conditions, we have adjusted the boat schedule on Nov. 2. Boarding begins 30 minutes prior to departure. Shuttles will be running normally!'
            }
            let transportInfo = document.createElement('p');
            transportInfo.innerHTML = infoText;
            transportInfo.className = 'bp-copy';
            transportInfo.style.color = 'white';
            if (idx === 0 && data.day === 'Thursday, 2nd Nov.') {
                transportInfo.style.fontStyle = 'italic';
            }
            card.appendChild(transportInfo);

            generateTransportSection(card, data, "To Solana Campus:", "To central Amsterdam:");
            dayContainer.appendChild(card);
            
        });

	// Initially hide all child elements except the day header
        Array.from(dayContainer.children).forEach(child => {
            if(child !== dayHeader) {
	        child.style.display = 'none';
            }
        });
        container.appendChild(dayContainer);
    }

    document.body.appendChild(container);
}

function generateTransportSection(card, dayData, toSolanaText, fromSolanaText) {
    // To Solana
    let toSolanaHeader = document.createElement('h3');
    toSolanaHeader.innerHTML = toSolanaText; // Use innerHTML
    toSolanaHeader.style.color = 'white';
    card.appendChild(toSolanaHeader);

    dayData.toSolana.forEach(trip => {
        let tripElement = document.createElement('p');
        tripElement.innerHTML = trip;  // Use innerHTML
        tripElement.className = 'bp-list-item';
        tripElement.style.color = 'white';
        card.appendChild(tripElement);
    });

    // From Solana
    if (dayData.fromSolana.length > 0) {
        let fromSolanaHeader = document.createElement('h3');
        fromSolanaHeader.innerHTML = fromSolanaText;  // Use innerHTML
        fromSolanaHeader.style.color = 'white';
        card.appendChild(fromSolanaHeader);

        dayData.fromSolana.forEach(trip => {
            let tripElement = document.createElement('p');
            tripElement.innerHTML = trip;  // Use innerHTML
            tripElement.className = 'bp-list-item';
            tripElement.style.color = 'white';
            card.appendChild(tripElement);
    });
    }
    
}

    function generateTransportSchedule(scheduleData, containerId, title, introText) {
        let container = document.createElement('div');
        container.id = containerId;

        // Title
        let titleElement = document.createElement('h1');
        titleElement.innerText = title;
        titleElement.style.color = 'white';
        container.appendChild(titleElement);

        // Intro
        let introElement = document.createElement('p');
        introElement.innerHTML = introText;
        introElement.className = 'bp-copy';  // add .bp-copy class
        introElement.style.color = 'white';
        container.appendChild(introElement);

        scheduleData.forEach(dayData => {
            let dayContainer = document.createElement('div');
            dayContainer.className = "event-day";
            // Ensure the initial state is not expanded
            dayContainer.classList.remove('expanded');
            // Day Header
            let dayHeader = document.createElement('h2');
            dayHeader.innerText = dayData.day;
            dayHeader.className = 'bp-title';  // add .bp-title class
            dayHeader.style.color = 'white';
            dayContainer.appendChild(dayHeader);


            dayHeader.addEventListener('click', function () {
                let siblings = Array.prototype.slice.call(this.parentElement.children);
                siblings.forEach(function (sibling) {
                    if (sibling !== dayHeader) {
                        if (sibling.style.display === 'none' || !sibling.style.display) {
                            sibling.style.display = 'block';
                        } else {
                            sibling.style.display = 'none';
                        }
                    }
                });

                if (this.parentElement.classList.contains('expanded')) {
                    this.parentElement.classList.remove('expanded');
                } else {
                    this.parentElement.classList.add('expanded');
                }
            });

            // To Solana
            let toSolanaHeader = document.createElement('h3');
            toSolanaHeader.innerText = "To Solana Campus:";
            toSolanaHeader.style.color = 'white';
            dayContainer.appendChild(toSolanaHeader);
            // Hide the section by default
            toSolanaHeader.style.display = 'none';


            dayData.toSolana.forEach(trip => {
                let tripElement = document.createElement('p');
                tripElement.innerHTML = trip;
                tripElement.className = 'bp-list-item';  // add .bp-list-item class
                tripElement.style.color = 'white';
                dayContainer.appendChild(tripElement);
                // Hide each trip by default
                tripElement.style.display = 'none';
            });

            // From Solana
            let fromSolanaHeader = document.createElement('h3');
            fromSolanaHeader.innerText = "To central Amsterdam:";
            fromSolanaHeader.style.color = 'white';
            dayContainer.appendChild(fromSolanaHeader);
            fromSolanaHeader.style.display = 'none';


            dayData.fromSolana.forEach(trip => {
                let tripElement = document.createElement('p');
                tripElement.innerText = trip;
                tripElement.className = 'bp-list-item';  // add .bp-list-item class
                tripElement.style.color = 'white';
                dayContainer.appendChild(tripElement);
                // Hide each trip by default
                tripElement.style.display = 'none';
            });

            container.appendChild(dayContainer);
        });

        document.body.appendChild(container);
    }

    function addNonCollapsibleContent() {
        let container = document.createElement('div');
        container.id = 'nonCollapsible';

        // Car Info
        let carInfo = document.createElement('div');
        carInfo.innerHTML = `
        <h3>Car</h3>
        <p>The Solana Campus is approximately a 15-20 minute drive from Centraal Station and easily accessible by private car, taxi, or <a href="https://www.uber.com/global/en/cities/amsterdam/">Uber</a>. <b>Please note that there is extremely limited parking on site, and we encourage you to share rides or use the transportation provided to get to campus.</b></p>
        <p>Solana Campus is located at the TAETS Arts and Event Park — but to get there, please put the following address in your GPS to locate the dropoff/pickup point:</p>
        <p><b>Grote Hulzen 13, Zaandam, Netherlands</b></p>
    `;
        container.appendChild(carInfo);

        // Bike Info
        let bikeInfo = document.createElement('div');
        bikeInfo.innerHTML = `
       <h3>Bike</h3>
<p> The Solana Campus is approximately a 35 minute bike ride from Centraal Station,
and requires a ride on the <a href="https://reisinfo.gvb.nl/en/lijnen/F20/dienstregeling/heen" style="color:#80ECFF;" target="_blank">F20 Ferry</a>. Bike racks are available for parking on the Solana Campus.</p>


    `;
        container.appendChild(bikeInfo);

        // Public Transport Info
        let publicTransportInfo = document.createElement('div');
        publicTransportInfo.innerHTML = `
    <h3>Public transport</h3>
    <p style="margin-bottom: 24px;">The Solana Campus is accessible via public transit as well. From Zaandam Station:</p>
`;

        let pItem1 = document.createElement('p');
        pItem1.style.color = 'white';  // set color to white
        pItem1.innerText = '• Take the 456 bus to Zaandam, Hemkade';
        publicTransportInfo.appendChild(pItem1);

        let pItem2 = document.createElement('p');
        pItem2.style.color = 'white';  // set color to white
        pItem2.innerHTML = '• Take the 64 bus to Zaandam, Hembrugterrein and <a href="https://maps.app.goo.gl/GwbLX59VDyuGUZ8c9">walk 9 minutes</a>';
        publicTransportInfo.appendChild(pItem2);

        container.appendChild(publicTransportInfo);

        document.body.appendChild(container);
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Preamble Text
        let preamble = document.createElement('div');
        preamble.innerHTML = `
        <p>Getting to campus is a breeze! Transportation by boat and shuttle to the Solana Campus will be provided every day, connecting the Solana Campus to central Amsterdam. <b>Please note that while Solana Campus is accessible by car, there is extremely limited parking on site — we encourage you to take the provided transportation!</b></p>
	<p>To board the boat, you’ll need to claim an NFT ticket designed by Nora Lightsilver! On October 30th and 31st, this will be accepted in lieu of your Breakpoint badge to board the shuttles to Breakpoint. <b>Claim your <a href="https://www.crossmint.com/collections/breakpoint-horizon/claim">NFT ticket here.</a></b></p>

        <p><i>All boats and shuttles depart central Amsterdam from <a href="https://maps.app.goo.gl/LyD2XG7QrYF6Va4e9">IJCatcher.</a></i></p>
    `;
        preamble.style.color = 'white';
        document.body.appendChild(preamble);

        generateCombinedSchedule(boatSchedule, shuttleSchedule);

        addNonCollapsibleContent();
    });
</script>
